Purpose: Downloads and displays an image from the internet.
Ref:http://www.androidhive.info/2012/07/android-loading-image-from-url-http/
Note: This is not a trivial matter. There are four files (classes) required
to make this work. They should be added without alteration.
ImageLoader.java
FileCache.java
MemoryCache.java
Utils.java


Code for AndroidManifest.xml
==============================
   <!-- Internet Permissions -->
    <uses-permission android:name="android.permission.INTERNET" />
     
    <!-- Permission to write to external storage -->
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />

Code for 'activity_main'
============================
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    android:orientation="vertical" >
 
    <TextView
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:text="Loading image from url"
        android:layout_margin="10dip" />
     
    <ImageView android:id="@+id/image"
        android:layout_height="wrap_content"
        android:layout_width="fill_parent"
        android:layout_margin="10dip"/>

    <Button
        android:id="@+id/buttonShow"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Download Image"
        android:onClick="buttonShow" />
 
</LinearLayout>





Code to go into calling activity
=================================
//add to onCreate -> loads small icom immediately
//NOTE: A blank URL "" is passed in first occurrence.
    // Loader image - will be shown before loading image
    int loader = R.drawable.ic_launcher;// R.drawable.loader;
     
    // Imageview to show
    ImageView image = (ImageView) findViewById(R.id.image);
    String image_url="";
    // ImageLoader class instance
    ImageLoader imgLoader = new ImageLoader(getApplicationContext()); 
    imgLoader.DisplayImage(image_url, loader, image);  
    
    
    
    
//add method that is called when button is clicked
  public void buttonShow(View view){

    // Loader image - will be shown before loading image
    int loader = R.drawable.ic_launcher;// R.drawable.loader;
     
    // Imageview to show
    ImageView image = (ImageView) findViewById(R.id.image);    
    // Image url
    String image_url = "http://api.androidhive.info/images/sample.jpg";
     
    // ImageLoader class instance
    ImageLoader imgLoader = new ImageLoader(getApplicationContext());
     
    // whenever you want to load an image from url
    // call DisplayImage function
    // url - image url to load
    // loader - loader image, will be displayed before getting image
    // image - ImageView
    imgLoader.DisplayImage(image_url, loader, image);   
  }    





Additional code
=================================
//------------------------------------------------------------------- Utils.java
public class Utils {
  public static void CopyStream(InputStream is, OutputStream os)
  {
      final int buffer_size=1024;
      try
      {
          byte[] bytes=new byte[buffer_size];
          for(;;)
          {
            int count=is.read(bytes, 0, buffer_size);
            if(count==-1)
                break;
            os.write(bytes, 0, count);
          }
      }
      catch(Exception ex){}
  }
}

//------------------------------------------------------------------- FileCache.java
public class FileCache {
  
  private File cacheDir;

  public FileCache(Context context){
      //Find the dir to save cached images
      if (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED))
          cacheDir=new File(android.os.Environment.getExternalStorageDirectory(),"TempImages");
      else
          cacheDir=context.getCacheDir();
      if(!cacheDir.exists())
          cacheDir.mkdirs();
  }

  public File getFile(String url){
      String filename=String.valueOf(url.hashCode());
      File f = new File(cacheDir, filename);
      return f;

  }

  public void clear(){
      File[] files=cacheDir.listFiles();
      if(files==null)
          return;
      for(File f:files)
          f.delete();
  }

}


//------------------------------------------------------------------------------ MemoryCache.java
public class MemoryCache {
  private Map<String, SoftReference<Bitmap>> cache=Collections.synchronizedMap(new HashMap<String, SoftReference<Bitmap>>());

  public Bitmap get(String id){
      if(!cache.containsKey(id))
          return null;
      SoftReference<Bitmap> ref=cache.get(id);
      return ref.get();
  }

  public void put(String id, Bitmap bitmap){
      cache.put(id, new SoftReference<Bitmap>(bitmap));
  }

  public void clear() {
      cache.clear();
  }
}

//------------------------------------------------------------------------------ ImageLoader.java
public class ImageLoader {
  
  MemoryCache memoryCache=new MemoryCache();
  FileCache fileCache;
  private Map<ImageView, String> imageViews=Collections.synchronizedMap(new WeakHashMap<ImageView, String>());
  ExecutorService executorService;

  public ImageLoader(Context context){
      fileCache=new FileCache(context);
      executorService=Executors.newFixedThreadPool(5);
  }

  int stub_id = R.drawable.ic_launcher;
  public void DisplayImage(String url, int loader, ImageView imageView)
  {
      stub_id = loader;
      imageViews.put(imageView, url);
      Bitmap bitmap=memoryCache.get(url);
      if(bitmap!=null)
          imageView.setImageBitmap(bitmap);
      else
      {
          queuePhoto(url, imageView);
          imageView.setImageResource(loader);
      }
  }

  private void queuePhoto(String url, ImageView imageView)
  {
      PhotoToLoad p=new PhotoToLoad(url, imageView);
      executorService.submit(new PhotosLoader(p));
  }

  private Bitmap getBitmap(String url)
  {
      File f=fileCache.getFile(url);

      //from SD cache
      Bitmap b = decodeFile(f);
      if(b!=null)
          return b;

      //from web
      try {
          Bitmap bitmap=null;
          URL imageUrl = new URL(url);
          HttpURLConnection conn = (HttpURLConnection)imageUrl.openConnection();
          conn.setConnectTimeout(30000);
          conn.setReadTimeout(30000);
          conn.setInstanceFollowRedirects(true);
          InputStream is=conn.getInputStream();
          OutputStream os = new FileOutputStream(f);
          Utils.CopyStream(is, os);
          os.close();
          bitmap = decodeFile(f);
          return bitmap;
      } catch (Exception ex){
         ex.printStackTrace();
         return null;
      }
  }

  //decodes image and scales it to reduce memory consumption
  private Bitmap decodeFile(File f){
      try {
          //decode image size
          BitmapFactory.Options o = new BitmapFactory.Options();
          o.inJustDecodeBounds = true;
          BitmapFactory.decodeStream(new FileInputStream(f),null,o);

          //Find the correct scale value. It should be the power of 2.
          final int REQUIRED_SIZE=70;
          int width_tmp=o.outWidth, height_tmp=o.outHeight;
          int scale=1;
          while(true){
              if(width_tmp/2<REQUIRED_SIZE || height_tmp/2<REQUIRED_SIZE)
                  break;
              width_tmp/=2;
              height_tmp/=2;
              scale*=2;
          }

          //decode with inSampleSize
          BitmapFactory.Options o2 = new BitmapFactory.Options();
          o2.inSampleSize=scale;
          return BitmapFactory.decodeStream(new FileInputStream(f), null, o2);
      } catch (FileNotFoundException e) {}
      return null;
  }

  //Task for the queue
  private class PhotoToLoad
  {
      public String url;
      public ImageView imageView;
      public PhotoToLoad(String u, ImageView i){
          url=u;
          imageView=i;
      }
  }

  class PhotosLoader implements Runnable {
      PhotoToLoad photoToLoad;
      PhotosLoader(PhotoToLoad photoToLoad){
          this.photoToLoad=photoToLoad;
      }

      @Override
      public void run() {
          if(imageViewReused(photoToLoad))
              return;
          Bitmap bmp=getBitmap(photoToLoad.url);
          memoryCache.put(photoToLoad.url, bmp);
          if(imageViewReused(photoToLoad))
              return;
          BitmapDisplayer bd=new BitmapDisplayer(bmp, photoToLoad);
          Activity a=(Activity)photoToLoad.imageView.getContext();
          a.runOnUiThread(bd);
      }
  }

  boolean imageViewReused(PhotoToLoad photoToLoad){
      String tag=imageViews.get(photoToLoad.imageView);
      if(tag==null || !tag.equals(photoToLoad.url))
          return true;
      return false;
  }

  //Used to display bitmap in the UI thread
  class BitmapDisplayer implements Runnable
  {
      Bitmap bitmap;
      PhotoToLoad photoToLoad;
      public BitmapDisplayer(Bitmap b, PhotoToLoad p){bitmap=b;photoToLoad=p;}
      public void run()
      {
          if(imageViewReused(photoToLoad))
              return;
          if(bitmap!=null)
              photoToLoad.imageView.setImageBitmap(bitmap);
          else
              photoToLoad.imageView.setImageResource(stub_id);
      }
  }

  public void clearCache() {
      memoryCache.clear();
      fileCache.clear();
  }

}



